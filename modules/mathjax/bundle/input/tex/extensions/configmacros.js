(()=>{"use strict";var e={d:(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};e.r(n),e.d(n,{ConfigMacrosConfiguration:()=>T});const t=("undefined"!=typeof window?window:global).MathJax._.components.global,o=(t.GLOBAL,t.isObject,t.combineConfig,t.combineDefaults,t.combineWithMathJax),a=(t.MathJax,MathJax._.input.tex.HandlerTypes),i=a.ConfigurationType,r=a.HandlerType,s=MathJax._.input.tex.Configuration,c=s.Configuration,p=(s.ConfigurationHandler,s.ParserConfiguration,MathJax._.util.Options),d=(p.isObject,p.APPEND,p.REMOVE,p.OPTIONS,p.Expandable,p.expandable),f=(p.makeArray,p.keys,p.copy,p.insert,p.defaultOptions,p.userOptions,p.selectOptions,p.selectOptionsFromKeys,p.separateOptions,p.lookup,MathJax._.input.tex.TokenMap),m=(f.parseResult,f.AbstractTokenMap,f.RegExpMap,f.AbstractParseMap,f.CharacterMap,f.DelimiterMap,f.MacroMap),l=f.CommandMap,u=f.EnvironmentMap,M=MathJax._.input.tex.ParseMethods.default,O=MathJax._.input.tex.Token,g=(O.Token,O.Macro),x=MathJax._.input.tex.newcommand.NewcommandMethods.default,y=MathJax._.input.tex.newcommand.NewcommandItems.BeginEnvItem,h="configmacros-map",b="configmacros-active-map",v="configmacros-env-map";function C(e,n,t){const o=t.parseOptions.handlers.retrieve(n),a=t.parseOptions.options[e];for(const e of Object.keys(a)){const n="string"==typeof a[e]?[a[e]]:a[e],t=Array.isArray(n[2])?new g(e,x.MacroWithTemplate,n.slice(0,2).concat(n[2])):new g(e,x.Macro,n);o.add(e,t)}}const T=c.create("configmacros",{[i.INIT]:function(e){new m(b,{}),new l(h,{}),new u(v,M.environment,{}),e.append(c.local({handler:{[r.CHARACTER]:[b],[r.MACRO]:[h],[r.ENVIRONMENT]:[v]},priority:3}))},[i.CONFIG]:function(e,n){!function(e){C("active",b,e)}(n),function(e){C("macros",h,e)}(n),function(e){const n=e.parseOptions.handlers.retrieve(v),t=e.parseOptions.options.environments;for(const e of Object.keys(t))n.add(e,new g(e,x.BeginEnv,[!0].concat(t[e])))}(n)},[i.ITEMS]:{[y.prototype.kind]:y},[i.OPTIONS]:{active:d({}),macros:d({}),environments:d({})}});MathJax.loader&&MathJax.loader.checkVersion("[tex]/configmacros","4.0.0","tex-extension"),o({_:{input:{tex:{configmacros:{ConfigMacrosConfiguration:n}}}}})})();