(()=>{"use strict";var e={d:(t,a)=>{for(var r in a)e.o(a,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:a[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{ExtpfeilConfiguration:()=>h});const a=("undefined"!=typeof window?window:global).MathJax._.components.global,r=(a.GLOBAL,a.isObject,a.combineConfig,a.combineDefaults,a.combineWithMathJax),o=(a.MathJax,MathJax._.input.tex.HandlerTypes),n=o.ConfigurationType,i=o.HandlerType,m=MathJax._.input.tex.Configuration,x=m.Configuration,w=(m.ConfigurationHandler,m.ParserConfiguration,MathJax._.input.tex.TokenMap),c=(w.parseResult,w.AbstractTokenMap,w.RegExpMap,w.AbstractParseMap,w.CharacterMap,w.DelimiterMap,w.MacroMap,w.CommandMap),p=(w.EnvironmentMap,MathJax._.input.tex.ams.AmsMethods.AmsMethods),u=MathJax._.input.tex.newcommand.NewcommandUtil,d=(u.NewcommandTables,u.NewcommandPriority,u.NewcommandUtil),l=MathJax._.input.tex.newcommand.NewcommandConfiguration,s=l.NewcommandConfig,f=(l.NewcommandConfiguration,MathJax._.input.tex.TexError.default),g={NewExtArrow(e,t){let a=e.GetArgument(t);const r=e.GetArgument(t),o=e.GetArgument(t);if(!a.match(/^\\([a-z]+|.)$/i))throw new f("NewextarrowArg1","First argument to %1 must be a control sequence name",t);if(!r.match(/^(\d+),(\d+)$/))throw new f("NewextarrowArg2","Second argument to %1 must be two integers separated by a comma",t);if(!o.match(/^(\d+|0x[0-9A-F]+)$/i))throw new f("NewextarrowArg3","Third argument to %1 must be a unicode character number",t);a=a.substring(1);const n=r.split(",");d.addMacro(e,a,g.xArrow,[parseInt(o),parseInt(n[0]),parseInt(n[1])]),e.Push(e.itemFactory.create("null"))},xArrow:p.xArrow};new c("extpfeil",{xtwoheadrightarrow:[g.xArrow,8608,12,16],xtwoheadleftarrow:[g.xArrow,8606,17,13],xmapsto:[g.xArrow,8614,6,7],xlongequal:[g.xArrow,61,7,7],xtofrom:[g.xArrow,8644,12,12],Newextarrow:g.NewExtArrow});const h=x.create("extpfeil",{[n.HANDLER]:{[i.MACRO]:["extpfeil"]},[n.CONFIG]:s});MathJax.loader&&MathJax.loader.checkVersion("[tex]/extpfeil","4.0.0","tex-extension"),r({_:{input:{tex:{extpfeil:{ExtpfeilConfiguration:t}}}}})})();